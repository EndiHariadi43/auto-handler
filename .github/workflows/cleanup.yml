name: Repository Housekeeping

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Preview saja (tanpa menghapus)"
        required: false
        default: "true"
      keep:
        description: "Simpan N run terbaru per workflow"
        required: false
        default: "0"
      days:
        description: "Hapus artifacts lebih tua dari N hari"
        required: false
        default: "1"
  schedule:
    - cron: "17 2 * * 0"
    - cron: "17 2 * * 4"

permissions:
  actions: write
  contents: read

concurrency:
  group: housekeeping-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prune:
    name: Prune Runs & Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gh jq

      - name: Resolve Inputs
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "DRY_RUN=false" >> "$GITHUB_ENV"
            echo "KEEP=0" >> "$GITHUB_ENV"
            echo "DAYS=1" >> "$GITHUB_ENV"
          else
            echo "DRY_RUN=${{ github.event.inputs.dry_run || 'true' }}" >> "$GITHUB_ENV"
            echo "KEEP=${{ github.event.inputs.keep || '0' }}" >> "$GITHUB_ENV"
            echo "DAYS=${{ github.event.inputs.days || '1' }}" >> "$GITHUB_ENV"
          fi
          echo "REPO=${{ github.repository }}" >> "$GITHUB_ENV"

      - id: del_runs
        name: Delete Old Workflow Runs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          MAX_DELETE=400
          DELETED=0
          PAGE=1
          while [ "$DELETED" -lt "$MAX_DELETE" ]; do
            RESP="$(gh api repos/${REPO}/actions/runs -F per_page=100 -F page=$PAGE)"
            COUNT="$(echo "$RESP" | jq '.workflow_runs | length')"
            [ "$COUNT" -eq 0 ] && break
            echo "$RESP" | jq -r --argjson KEEP "$KEEP" '
              .workflow_runs
              | group_by(.workflow_id)
              | .[]
              | sort_by(.created_at) | reverse
              | .[$KEEP:] // []
              | .[].id
            ' | while read -r RUN_ID; do
                [ -z "${RUN_ID:-}" ] && continue
                if [ "$DRY_RUN" = "true" ]; then
                  echo "[DRY-RUN] would delete run $RUN_ID"
                else
                  gh api -X DELETE repos/${REPO}/actions/runs/$RUN_ID >/dev/null 2>&1 || true
                  echo "[OK] deleted run $RUN_ID"
                  DELETED=$((DELETED+1))
                fi
                [ "$DELETED" -ge "$MAX_DELETE" ] && break
              done
            [ "$DELETED" -ge "$MAX_DELETE" ] && break
            PAGE=$((PAGE+1))
            sleep 1
          done
          echo "runs_deleted=$DELETED" >> $GITHUB_OUTPUT
          echo "[INFO] total deleted runs=$DELETED, dry_run=$DRY_RUN, keep=$KEEP"

      - id: del_artifacts
        name: Delete Old Artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          DELETED=0
          CUTOFF="$(date -u -d "${DAYS} days ago" +%s)"
          PAGE=1
          while :; do
            RESP="$(gh api repos/${REPO}/actions/artifacts -F per_page=100 -F page=$PAGE)"
            COUNT="$(echo "$RESP" | jq '.artifacts | length')"
            [ "$COUNT" -eq 0 ] && break
            echo "$RESP" | jq -r --argjson CUT "$CUTOFF" '
              .artifacts[]
              | select(.expired == true or (.created_at | fromdateiso8601 < $CUT))
              | .id
            ' | while read -r ART_ID; do
                [ -z "${ART_ID:-}" ] && continue
                if [ "$DRY_RUN" = "true" ]; then
                  echo "[DRY-RUN] would delete artifact $ART_ID"
                else
                  gh api -X DELETE repos/${REPO}/actions/artifacts/$ART_ID >/dev/null 2>&1 || true
                  echo "[OK] deleted artifact $ART_ID"
                  DELETED=$((DELETED+1))
                fi
              done
            PAGE=$((PAGE+1))
            sleep 1
          done
          echo "artifacts_deleted=$DELETED" >> $GITHUB_OUTPUT
          echo "[INFO] artifacts deleted=$DELETED; cutoff=${DAYS}d; dry_run=$DRY_RUN"

      - name: Notify Telegram
        if: always()
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          set +e
          RUNS="${{ steps.del_runs.outputs.runs_deleted || 0 }}"
          ARTS="${{ steps.del_artifacts.outputs.artifacts_deleted || 0 }}"
          MODE=$([ "$DRY_RUN" = "true" ] && echo "Preview (dry-run)" || echo "Eksekusi")
          MSG="ðŸ§¹ *Repository Housekeeping*\n\n\
          â€¢ Mode: *${MODE}*\n\
          â€¢ Keep per workflow: *${KEEP}*\n\
          â€¢ Artifact cutoff: *${DAYS}* hari\n\
          â€¢ Runs dihapus: *${RUNS}*\n\
          â€¢ Artifacts dihapus: *${ARTS}*\n\n\
          _Repo:_ \`${{ github.repository }}\`\n\
          _Actor:_ \`${{ github.actor }}\`"
          curl -s -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT_ID}" \
            --data-urlencode "text=${MSG}" \
            -d parse_mode=Markdown
